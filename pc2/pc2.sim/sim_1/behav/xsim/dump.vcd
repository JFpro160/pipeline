$date
   Sat Nov 16 17:44:16 2024
$end

$version
  2024.1
  $dumpfile ("dump.vcd") 
$end

$timescale
  1ps
$end

$scope module testbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var wire 32 # WriteData [31:0] $end
$var wire 32 $ DataAdr [31:0] $end
$var wire 1 % MemWrite $end
$scope module dut $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 32 # WriteData [31:0] $end
$var wire 32 $ DataAdr [31:0] $end
$var wire 1 % MemWrite $end
$var wire 32 ( PC [31:0] $end
$var wire 32 ) Instr [31:0] $end
$var wire 32 * ReadData [31:0] $end
$scope module arm $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 32 ( PC [31:0] $end
$var wire 32 ) Instr [31:0] $end
$var wire 1 % MemWrite $end
$var wire 32 $ ALUResult [31:0] $end
$var wire 32 # WriteData [31:0] $end
$var wire 32 * ReadData [31:0] $end
$var wire 4 + ALUFlags [3:0] $end
$var wire 1 , RegWrite $end
$var wire 1 - ALUSrc $end
$var wire 1 . MemtoReg $end
$var wire 1 / PCSrc $end
$var wire 2 0 RegSrc [1:0] $end
$var wire 2 1 ImmSrc [1:0] $end
$var wire 3 2 ALUControl [2:0] $end
$var wire 1 3 MulOp $end
$var wire 1 4 Shift $end
$var wire 1 5 RegShift $end
$scope module c $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 20 6 Instr [31:12] $end
$var wire 4 + ALUFlags [3:0] $end
$var wire 2 0 RegSrc [1:0] $end
$var wire 1 , RegWrite $end
$var wire 2 1 ImmSrc [1:0] $end
$var wire 1 - ALUSrc $end
$var wire 3 2 ALUControl [2:0] $end
$var wire 1 % MemWrite $end
$var wire 1 . MemtoReg $end
$var wire 1 / PCSrc $end
$var wire 1 3 MulOp $end
$var wire 4 7 MulCode [7:4] $end
$var wire 1 4 Shift $end
$var wire 1 5 RegShift $end
$var wire 2 8 FlagW [1:0] $end
$var wire 1 9 PCS $end
$var wire 1 : RegW $end
$var wire 1 ; MemW $end
$scope module dec $end
$var wire 2 < Op [27:26] $end
$var wire 6 = Funct [25:20] $end
$var wire 4 > Rd [15:12] $end
$var wire 4 7 MulCode [7:4] $end
$var reg 2 ? FlagW [1:0] $end
$var wire 1 9 PCS $end
$var wire 1 : RegW $end
$var wire 1 ; MemW $end
$var wire 1 . MemtoReg $end
$var wire 1 - ALUSrc $end
$var wire 2 1 ImmSrc [1:0] $end
$var wire 2 0 RegSrc [1:0] $end
$var reg 3 @ ALUControl [2:0] $end
$var wire 1 3 MulOp $end
$var wire 1 4 Shift $end
$var wire 1 5 RegShift $end
$var reg 10 A controls [9:0] $end
$var wire 1 B Branch $end
$var wire 1 C ALUOp $end
$upscope $end
$scope module cl $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 4 D Cond [31:28] $end
$var wire 4 + ALUFlags [3:0] $end
$var wire 2 8 FlagW [1:0] $end
$var wire 1 9 PCS $end
$var wire 1 : RegW $end
$var wire 1 ; MemW $end
$var wire 1 / PCSrc $end
$var wire 1 , RegWrite $end
$var wire 1 % MemWrite $end
$var wire 2 E FlagWrite [1:0] $end
$var wire 4 F Flags [3:0] $end
$var wire 1 G CondEx $end
$scope module flagreg1 $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 1 H en $end
$var wire 2 I d [3:2] $end
$var reg 2 J q [1:0] $end
$upscope $end
$scope module flagreg0 $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 1 K en $end
$var wire 2 L d [1:0] $end
$var reg 2 M q [1:0] $end
$upscope $end
$scope module cc $end
$var wire 4 D Cond [31:28] $end
$var wire 4 F Flags [3:0] $end
$var reg 1 N CondEx $end
$var wire 1 O neg $end
$var wire 1 P zero $end
$var wire 1 Q carry $end
$var wire 1 R overflow $end
$var wire 1 S ge $end
$upscope $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 2 0 RegSrc [1:0] $end
$var wire 1 , RegWrite $end
$var wire 2 1 ImmSrc [1:0] $end
$var wire 1 - ALUSrc $end
$var wire 3 2 ALUControl [2:0] $end
$var wire 1 . MemtoReg $end
$var wire 1 / PCSrc $end
$var wire 4 + ALUFlags [3:0] $end
$var wire 32 ( PC [31:0] $end
$var wire 32 ) Instr [31:0] $end
$var wire 32 $ ALUResult [31:0] $end
$var wire 32 # WriteData [31:0] $end
$var wire 32 * ReadData [31:0] $end
$var wire 32 T SrcBWire [31:0] $end
$var wire 32 U PCNext [31:0] $end
$var wire 32 V PCPlus4 [31:0] $end
$var wire 32 W PCPlus8 [31:0] $end
$var wire 32 X ExtImm [31:0] $end
$var wire 32 Y SrcA [31:0] $end
$var wire 32 Z SrcB [31:0] $end
$var wire 32 [ SrcC [31:0] $end
$var wire 32 \ Result [31:0] $end
$var wire 4 ] RA1 [3:0] $end
$var wire 4 ^ RA1Wire [3:0] $end
$var wire 4 _ RA2 [3:0] $end
$var wire 4 ` WA3 [3:0] $end
$var wire 4 a RA3 [3:0] $end
$var wire 1 4 Shift $end
$var wire 1 3 MulOp $end
$var wire 1 b Carry $end
$var wire 5 c Rot [4:0] $end
$var wire 5 d shamnt5 [11:7] $end
$var wire 2 e ShiftControl [6:5] $end
$var wire 1 5 RegShift $end
$var wire 32 f ShiftedSrcB [31:0] $end
$scope module pcmux $end
$var wire 32 V d0 [31:0] $end
$var wire 32 \ d1 [31:0] $end
$var wire 1 / s $end
$var wire 32 U y [31:0] $end
$upscope $end
$scope module pcreg $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 32 U d [31:0] $end
$var reg 32 g q [31:0] $end
$upscope $end
$scope module pcadd1 $end
$var wire 32 ( a [31:0] $end
$var wire 32 h b [31:0] $end
$var wire 32 V y [31:0] $end
$upscope $end
$scope module pcadd2 $end
$var wire 32 V a [31:0] $end
$var wire 32 h b [31:0] $end
$var wire 32 W y [31:0] $end
$upscope $end
$scope module mulra1mux $end
$var wire 4 i d0 [19:16] $end
$var wire 4 j d1 [11:8] $end
$var wire 1 3 s $end
$var wire 4 ^ y [3:0] $end
$upscope $end
$scope module ra1mux $end
$var wire 4 ^ d0 [3:0] $end
$var wire 4 k d1 [3:0] $end
$var wire 1 l s $end
$var wire 4 ] y [3:0] $end
$upscope $end
$scope module ra2mux $end
$var wire 4 m d0 [3:0] $end
$var wire 4 > d1 [15:12] $end
$var wire 1 n s $end
$var wire 4 _ y [3:0] $end
$upscope $end
$scope module ra3mux $end
$var wire 4 j d0 [11:8] $end
$var wire 4 > d1 [15:12] $end
$var wire 1 3 s $end
$var wire 4 a y [3:0] $end
$upscope $end
$scope module rwa3mux $end
$var wire 4 > d0 [15:12] $end
$var wire 4 i d1 [19:16] $end
$var wire 1 3 s $end
$var wire 4 ` y [3:0] $end
$upscope $end
$scope module rf $end
$var wire 1 & clk $end
$var wire 1 , we3 $end
$var wire 4 ] ra1 [3:0] $end
$var wire 4 _ ra2 [3:0] $end
$var wire 4 a ra3 [3:0] $end
$var wire 4 ` wa3 [3:0] $end
$var wire 32 \ wd3 [31:0] $end
$var wire 32 W r15 [31:0] $end
$var wire 32 Y rd1 [31:0] $end
$var wire 32 # rd2 [31:0] $end
$var wire 32 [ rd3 [31:0] $end
$upscope $end
$scope module resmux $end
$var wire 32 $ d0 [31:0] $end
$var wire 32 * d1 [31:0] $end
$var wire 1 . s $end
$var wire 32 \ y [31:0] $end
$upscope $end
$scope module ext $end
$var wire 24 o Instr [23:0] $end
$var wire 2 1 ImmSrc [1:0] $end
$var reg 32 p ExtImm [31:0] $end
$upscope $end
$scope module rotmux $end
$var wire 32 q d0 [31:0] $end
$var wire 32 [ d1 [31:0] $end
$var wire 1 5 s $end
$var wire 32 r y [31:0] $end
$upscope $end
$scope module sh $end
$var wire 5 c b [4:0] $end
$var wire 32 # a [31:0] $end
$var wire 2 e d [6:5] $end
$var wire 1 b carry_in $end
$var reg 32 s y [31:0] $end
$upscope $end
$scope module shiftmux $end
$var wire 32 # d0 [31:0] $end
$var wire 32 f d1 [31:0] $end
$var wire 1 4 s $end
$var wire 32 T y [31:0] $end
$upscope $end
$scope module srcbmux $end
$var wire 32 T d0 [31:0] $end
$var wire 32 X d1 [31:0] $end
$var wire 1 - s $end
$var wire 32 Z y [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 Y a [31:0] $end
$var wire 32 Z b [31:0] $end
$var wire 32 [ c [31:0] $end
$var wire 3 2 ALUControl [2:0] $end
$var reg 32 t Result [31:0] $end
$var wire 4 + ALUFlags [3:0] $end
$var wire 1 u neg $end
$var wire 1 v zero $end
$var wire 1 w carry $end
$var wire 1 x overflow $end
$var wire 32 y condinvb [31:0] $end
$var wire 33 z sum [32:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module imem $end
$var wire 32 ( a [31:0] $end
$var wire 32 ) rd [31:0] $end
$upscope $end
$scope module dmem $end
$var wire 1 & clk $end
$var wire 1 % we $end
$var wire 32 $ a [31:0] $end
$var wire 32 # wd [31:0] $end
$var wire 32 * rd [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
1!
1"
b1000 #
b0 $
0%
1&
1'
b0 (
b11100000010011110000000000001111 )
bx *
b110 +
1,
0-
0.
0/
b0 0
b0 1
b1 2
03
04
05
b11100000010011110000 6
b0 7
b0 8
09
1:
0;
b0 <
b100 =
b0 >
b0 ?
b1 @
b1001 A
0B
1C
b1110 D
b0 E
b0 F
1G
0H
b1 I
b0 J
0K
b10 L
b0 M
1N
0O
0P
0Q
0R
1S
b1000 T
b100 U
b100 V
b1000 W
b1111 X
b1000 Y
b1000 Z
bx [
b0 \
b1111 ]
b1111 ^
b1111 _
b0 `
b0 a
1b
b0 c
b0 d
b0 e
b1000 f
b0 g
b100 h
b1111 i
b0 j
b1111 k
0l
b1111 m
0n
b10011110000000000001111 o
b1111 p
bz00000 q
bz00000 r
b1000 s
b0 t
0u
1v
1w
0x
b11111111111111111111111111110111 y
b100000000000000000000000000000000 z
$end

#5000
0!
0&

#10000
1!
1&
b0 [

#15000
0!
0&

#20000
1!
1&

#22000
0"
0'

#25000
0!
0&

#30000
1!
bx #
b11 $
1&
b100 (
b11100010100000000001000000000011 )
b0 +
1-
b0 2
b11100010100000000001 6
b0 7
b0 <
b101000 =
b1 >
b0 @
b101001 A
b1110 D
b0 I
b0 L
bx T
b1000 U
b1000 V
b1100 W
b11 X
b0 Y
b11 Z
b11 \
b0 ]
b0 ^
b11 _
b1 `
0b
b0 d
b0 e
bx f
b100 g
b0 i
b0 j
b11 m
b100000000001000000000011 o
b11 p
bx s
b11 t
0u
0v
0w
0x
b11 y
b11 z

#35000
0!
0&

#40000
1!
b11 #
b11111111111111111111111111001111 $
1&
b1000 (
b11100010010000000010000000110001 )
b1000 +
b1 2
b11100010010000000010 6
b11 7
b0 <
b100100 =
b10 >
b1 @
b1110 D
b10 I
b0 L
b11 T
b1100 U
b1100 V
b10000 W
b110001 X
b110001 Z
b11111111111111111111111111001111 \
b1 _
b10 `
0b
b0 d
b1 e
b11 f
b1000 g
b0 i
b0 j
b1 m
b10000000010000000110001 o
b110001 p
b11 s
b11111111111111111111111111001111 t
1u
b11111111111111111111111111001110 y
b11111111111111111111111111001111 z

#45000
0!
0&

#50000
1!
bx #
b11111111111111111111111111111001 $
1&
b1100 (
b11100010010000000011000000000111 )
b11100010010000000011 6
b0 7
b0 <
b100100 =
b11 >
b1110 D
bx T
b10000 U
b10000 V
b10100 W
b111 X
b111 Z
b11111111111111111111111111111001 \
b111 _
b11 `
b0 d
b0 e
bx f
b1100 g
b0 i
b0 j
b111 m
b10000000011000000000111 o
b111 p
bx s
b11111111111111111111111111111001 t
b11111111111111111111111111111000 y
b11111111111111111111111111111001 z

#55000
0!
0&

#60000
1!
bx $
1&
b10000 (
b11100001101000001010001000001010 )
bx +
0-
b0 2
14
b11100001101000001010 6
b0 7
b0 <
b11010 =
b1010 >
b0 @
b1001 A
b1110 D
bx I
bx L
bx0000 T
b10100 U
b10100 V
b11000 W
b1010 X
bx0000 Z
b11111111111111111111111111001111 [
bx \
b1010 _
b1010 `
b10 a
xb
b100 c
b100 d
b0 e
bx0000 f
b10000 g
b0 i
b10 j
b1010 m
b101000001010001000001010 o
b1010 p
bz00100 q
bz00100 r
bx0000 s
bx t
xu
xv
xw
xx
bx0000 y
bx z

#65000
0!
0&

#70000
1!
b11 #
b0 $
1&
b10100 (
b11100001101000000110010000100001 )
b100 +
b11100001101000000110 6
b10 7
b0 <
b11010 =
b110 >
b1110 D
b1 I
b0 L
b0 T
b11000 U
b11000 V
b11100 W
b100001 X
b0 Z
bx [
b0 \
b1 _
b110 `
b100 a
0b
b1000 c
b1000 d
b1 e
b0 f
b10100 g
b0 i
b100 j
b1 m
b101000000110010000100001 o
b100001 p
bz01000 q
bz01000 r
b0 s
b0 t
0u
1v
0w
0x
b0 y
b0 z

#75000
0!
0&

#80000
1!
b1100000000000000000000000000 $
1&
b11000 (
b11100001101000000100001101100001 )
b0 +
b11100001101000000100 6
b110 7
b0 <
b11010 =
b100 >
b1110 D
b0 I
b0 L
b1100000000000000000000000000 T
b11100 U
b11100 V
b100000 W
b1100001 X
b1100000000000000000000000000 Z
b11111111111111111111111111111001 [
b1100000000000000000000000000 \
b100 `
b11 a
0b
b110 c
b110 d
b11 e
b1100000000000000000000000000 f
b11000 g
b0 i
b11 j
b1 m
b101000000100001101100001 o
b1100001 p
bz00110 q
bz00110 r
b1100000000000000000000000000 s
b1100000000000000000000000000 t
0v
b1100000000000000000000000000 y
b1100000000000000000000000000 z

#85000
0!
0&

#90000
1!
b1100000000000000000000000000 #
b11000000000 $
1&
b11100 (
b11100001101000000101100011000100 )
b11100001101000000101 6
b1100 7
b0 <
b11010 =
b101 >
b1110 D
b11000000000 T
b100000 U
b100000 V
b100100 W
b11000100 X
b11000000000 Z
bx [
b11000000000 \
b100 _
b101 `
b1000 a
b10001 c
b10001 d
b10 e
b11000000000 f
b11100 g
b0 i
b1000 j
b100 m
b101000000101100011000100 o
b11000100 p
bz10001 q
bz10001 r
b11000000000 s
b11000000000 t
b11000000000 y
b11000000000 z

#95000
0!
0&

#100000
1!
b11 #
b11 $
1&
b100000 (
b11100001101000001000000000000001 )
b11100001101000001000 6
b0 7
b0 <
b11010 =
b1000 >
b1110 D
b11 T
b100100 U
b100100 V
b101000 W
b1 X
b11 Z
b0 [
b11 \
b1 _
b1000 `
b0 a
b0 c
b0 d
b0 e
b11 f
b100000 g
b0 i
b0 j
b1 m
b101000001000000000000001 o
b1 p
bz00000 q
bz00000 r
b11 s
b11 t
b11 y
b11 z

#105000
0!
0&

#110000
1!
b11111111111111111111111111001111 #
b1111111111111111111111111100 $
1&
b100100 (
b11100001101000001001001001000010 )
b11100001101000001001 6
b100 7
b0 <
b11010 =
b1001 >
b1110 D
b1111111111111111111111111100 T
b101000 U
b101000 V
b101100 W
b1000010 X
b1111111111111111111111111100 Z
b11111111111111111111111111001111 [
b1111111111111111111111111100 \
b10 _
b1001 `
b10 a
b100 c
b100 d
b10 e
b1111111111111111111111111100 f
b100100 g
b0 i
b10 j
b10 m
b101000001001001001000010 o
b1000010 p
bz00100 q
bz00100 r
b1111111111111111111111111100 s
b1111111111111111111111111100 t
b1111111111111111111111111100 y
b1111111111111111111111111100 z

#115000
0!
0&

#120000
1!
bx #
bx $
1&
b101000 (
bx )
bx +
x,
x/
bx 2
x3
x4
x5
bx 6
bx 7
bx 8
x9
bx <
bx =
bx >
bx ?
bx @
bx D
bx E
xG
xH
bx I
xK
bx L
xN
bx T
bx U
b101100 V
b110000 W
b0xxxxxxxx X
bx Y
bx Z
bx [
bx \
bx ]
bx ^
bx _
bx `
bx a
xb
bx c
bx d
bx e
bx f
b101000 g
bx i
bx j
bx m
bx o
b0xxxxxxxx p
bzxxxxx q
bx r
bx s
bx t
xu
xv
xw
xx
bx y
bx z

#125000
0!
0&

#130000
1!
1&
bx (
bx V
bx W
bx g

#135000
0!
0&

#140000
1!
1&
